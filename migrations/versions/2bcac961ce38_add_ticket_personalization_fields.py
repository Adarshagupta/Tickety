"""add_ticket_personalization_fields

Revision ID: 2bcac961ce38
Revises: 843d80fdd8f0
Create Date: 2025-02-20 19:29:32.178610

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import table, column
import random
import string


# revision identifiers, used by Alembic.
revision = '2bcac961ce38'
down_revision = '843d80fdd8f0'
branch_labels = None
depends_on = None


def generate_ticket_code():
    """Generate a unique ticket code."""
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # First add all columns as nullable
    with op.batch_alter_table('booking', schema=None) as batch_op:
        batch_op.add_column(sa.Column('attendee_details', sa.JSON(), nullable=True))
        batch_op.add_column(sa.Column('ticket_code', sa.String(length=20), nullable=True))
        batch_op.add_column(sa.Column('qr_code', sa.String(length=500), nullable=True))
        batch_op.add_column(sa.Column('barcode', sa.String(length=500), nullable=True))
        batch_op.add_column(sa.Column('check_in_time', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('check_in_status', sa.Boolean(), nullable=True))

    # Update existing records with default values
    booking_table = table('booking',
        column('id', sa.Integer),
        column('attendee_details', sa.JSON),
        column('ticket_code', sa.String)
    )
    
    # Get all existing booking IDs
    connection = op.get_bind()
    bookings = connection.execute(sa.text('SELECT id FROM booking')).fetchall()
    
    # Update each booking with unique values
    for booking_id in bookings:
        ticket_code = generate_ticket_code()
        # Keep generating until we get a unique code
        while connection.execute(
            sa.text('SELECT id FROM booking WHERE ticket_code = :code'),
            {'code': ticket_code}
        ).fetchone() is not None:
            ticket_code = generate_ticket_code()
            
        connection.execute(
            booking_table.update().where(
                booking_table.c.id == booking_id[0]
            ).values(
                attendee_details={'name': 'Unknown', 'email': 'unknown@example.com'},
                ticket_code=ticket_code
            )
        )
    
    # Now make the required columns non-nullable
    with op.batch_alter_table('booking', schema=None) as batch_op:
        batch_op.alter_column('attendee_details',
               existing_type=sa.JSON(),
               nullable=False)
        batch_op.alter_column('ticket_code',
               existing_type=sa.String(length=20),
               nullable=False)
        batch_op.create_unique_constraint(None, ['ticket_code'])

    # Add event columns
    with op.batch_alter_table('event', schema=None) as batch_op:
        batch_op.add_column(sa.Column('ticket_fields', sa.JSON(), nullable=True))
        batch_op.add_column(sa.Column('ticket_instructions', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('ticket_template', sa.String(length=50), server_default='default', nullable=True))
        batch_op.add_column(sa.Column('show_qr_code', sa.Boolean(), server_default='true', nullable=True))
        batch_op.add_column(sa.Column('show_barcode', sa.Boolean(), server_default='true', nullable=True))

    # Update existing events with default ticket_fields
    event_table = table('event',
        column('ticket_fields', sa.JSON)
    )
    
    default_ticket_fields = {
        'name': {'required': True, 'enabled': True},
        'email': {'required': True, 'enabled': True},
        'phone': {'required': False, 'enabled': True},
        'age': {'required': False, 'enabled': False},
        'gender': {'required': False, 'enabled': False},
        'id_proof': {'required': False, 'enabled': False},
        'address': {'required': False, 'enabled': False},
        'custom_fields': []
    }
    
    op.execute(
        event_table.update().values(
            ticket_fields=default_ticket_fields
        )
    )
    
    # Make ticket_fields non-nullable
    with op.batch_alter_table('event', schema=None) as batch_op:
        batch_op.alter_column('ticket_fields',
               existing_type=sa.JSON(),
               nullable=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('event', schema=None) as batch_op:
        batch_op.drop_column('show_barcode')
        batch_op.drop_column('show_qr_code')
        batch_op.drop_column('ticket_template')
        batch_op.drop_column('ticket_instructions')
        batch_op.drop_column('ticket_fields')

    with op.batch_alter_table('booking', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='unique')
        batch_op.drop_column('check_in_status')
        batch_op.drop_column('check_in_time')
        batch_op.drop_column('barcode')
        batch_op.drop_column('qr_code')
        batch_op.drop_column('ticket_code')
        batch_op.drop_column('attendee_details')

    # ### end Alembic commands ###
